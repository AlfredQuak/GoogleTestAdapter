<?xml version="1.0" encoding="utf-16"?>
<TestRun>
  <TestGroup>
    <description>Failed Tests</description>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/0.CanDefeatMath&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/0.CanDefeatMath</FullyQualifiedName>
      <Result>Test Failed - Arr/TypeParameterizedTests/0.CanDefeatMath&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 53</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:54</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/0.ThreeTraits&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/0.ThreeTraits</FullyQualifiedName>
      <Result>Test Failed - Arr/TypeParameterizedTests/0.ThreeTraits&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 61</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:62</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/0.TwoTraits&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/0.TwoTraits</FullyQualifiedName>
      <Result>Test Failed - Arr/TypeParameterizedTests/0.TwoTraits&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 57</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:58</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Crashing.AddFailsBeforeCrash</Name>
      <Result>Test Failed - Crashing.AddFailsBeforeCrash</Result>
      <Source>crashingtests.cpp line 11</Source>
      <Error>Message: 
Value of: Add(10, 10)
  Actual: 20
Expected: 1000</Error>
      <Stacktrace>crashingtests.cpp:12</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Crashing.TheCrash</Name>
      <Result>Test Failed - Crashing.TheCrash</Result>
      <Source>crashingtests.cpp line 21</Source>
      <Error>Message: 
!! This is probably the test that crashed !!</Error>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.Simple/1 [(1,!)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.Simple/1</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.Simple/1 [(1,!)]</Result>
      <Source>parameterizedtests.cpp line 23</Source>
      <Error>Message: 
Value of: GetParam().s
  Actual: "!"
Expected: ""</Error>
      <Stacktrace>parameterizedtests.cpp:25</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.Simple/2 [(-1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.Simple/2</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.Simple/2 [(-1,)]</Result>
      <Source>parameterizedtests.cpp line 23</Source>
      <Error>Message: 
Value of: GetParam().i
  Actual: -1
Expected: 1</Error>
      <Stacktrace>parameterizedtests.cpp:24</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits/1 [(1,!)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits/1</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits/1 [(1,!)]</Result>
      <Source>parameterizedtests.cpp line 28</Source>
      <Error>Message: 
Value of: GetParam().s
  Actual: "!"
Expected: ""</Error>
      <Stacktrace>parameterizedtests.cpp:30</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits/2 [(-1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits/2</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits/2 [(-1,)]</Result>
      <Source>parameterizedtests.cpp line 28</Source>
      <Error>Message: 
Value of: GetParam().i
  Actual: -1
Expected: 1</Error>
      <Stacktrace>parameterizedtests.cpp:29</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits2/1 [(1,!)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits2/1</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits2/1 [(1,!)]</Result>
      <Source>parameterizedtests.cpp line 33</Source>
      <Error>Message: 
Value of: GetParam().s
  Actual: "!"
Expected: ""</Error>
      <Stacktrace>parameterizedtests.cpp:35</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits2/2 [(-1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits2/2</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits2/2 [(-1,)]</Result>
      <Source>parameterizedtests.cpp line 33</Source>
      <Error>Message: 
Value of: GetParam().i
  Actual: -1
Expected: 1</Error>
      <Stacktrace>parameterizedtests.cpp:34</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits3/1 [(1,!)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits3/1</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits3/1 [(1,!)]</Result>
      <Source>parameterizedtests.cpp line 38</Source>
      <Error>Message: 
Value of: GetParam().s
  Actual: "!"
Expected: ""</Error>
      <Stacktrace>parameterizedtests.cpp:40</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits3/2 [(-1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits3/2</FullyQualifiedName>
      <Result>Test Failed - InstantiationName/ParameterizedTests.SimpleTraits3/2 [(-1,)]</Result>
      <Source>parameterizedtests.cpp line 38</Source>
      <Error>Message: 
Value of: GetParam().i
  Actual: -1
Expected: 1</Error>
      <Stacktrace>parameterizedtests.cpp:39</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>LongRunningTests.Test2</Name>
      <Result>Test Failed - LongRunningTests.Test2</Result>
      <Source>longrunningtests.cpp line 11</Source>
      <Error>Message: 
Value of: 2
Expected: 1</Error>
      <Stacktrace>longrunningtests.cpp:13</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ExpectAndAssert</Name>
      <Result>Test Failed - MessageParserTests.ExpectAndAssert</Result>
      <Source>scopedtracestests.cpp line 32</Source>
      <Error>Message: 
#1 - Value of: 4
Expected: 3
#2 - Value of: 5
Expected: 4</Error>
      <Stacktrace>#2 - scopedtracestests.cpp:34</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ExpectInOtherFile</Name>
      <Result>Test Failed - MessageParserTests.ExpectInOtherFile</Result>
      <Source>scopedtracestests.cpp line 43</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>main.cpp:27</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ExpectInOtherMethod</Name>
      <Result>Test Failed - MessageParserTests.ExpectInOtherMethod</Result>
      <Source>scopedtracestests.cpp line 38</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>scopedtracestests.cpp:12</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ExpectInTestAndMethodAndOtherFile</Name>
      <Result>Test Failed - MessageParserTests.ExpectInTestAndMethodAndOtherFile</Result>
      <Source>scopedtracestests.cpp line 48</Source>
      <Error>Message: 
#1 - Value of: 6
Expected: 5
#2 - Value of: i
  Actual: 1
Expected: 0
#3 - Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>#3 - main.cpp:27</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ScopedTraceInHelperMethod</Name>
      <Result>Test Failed - MessageParserTests.ScopedTraceInHelperMethod</Result>
      <Source>scopedtracestests.cpp line 70</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>--&gt;HelperMethod</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ScopedTraceInTestMethod</Name>
      <Result>Test Failed - MessageParserTests.ScopedTraceInTestMethod</Result>
      <Source>scopedtracestests.cpp line 55</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>--&gt;TestMethod</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ScopedTraceInTestMethodANdHelperMethod</Name>
      <Result>Test Failed - MessageParserTests.ScopedTraceInTestMethodANdHelperMethod</Result>
      <Source>scopedtracestests.cpp line 75</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>--&gt;TestMethod</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.ScopedTraceInTestMethodANdHelperMethodAndExpectInTestMethod</Name>
      <Result>Test Failed - MessageParserTests.ScopedTraceInTestMethodANdHelperMethodAndExpectInTestMethod</Result>
      <Source>scopedtracestests.cpp line 81</Source>
      <Error>Message: 
#1 - Value of: i
  Actual: 1
Expected: 0
#2 - Value of: 1
Expected: 0</Error>
      <Stacktrace>--&gt;TestMethod</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.SimpleAssert</Name>
      <Result>Test Failed - MessageParserTests.SimpleAssert</Result>
      <Source>scopedtracestests.cpp line 22</Source>
      <Error>Message: 
Value of: 2
Expected: 1</Error>
      <Stacktrace>scopedtracestests.cpp:23</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.SimpleExpect</Name>
      <Result>Test Failed - MessageParserTests.SimpleExpect</Result>
      <Source>scopedtracestests.cpp line 27</Source>
      <Error>Message: 
Value of: 3
Expected: 2</Error>
      <Stacktrace>scopedtracestests.cpp:28</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>MessageParserTests.TwoScopedTracesInTestMethod</Name>
      <Result>Test Failed - MessageParserTests.TwoScopedTracesInTestMethod</Result>
      <Source>scopedtracestests.cpp line 61</Source>
      <Error>Message: 
Value of: i
  Actual: 1
Expected: 0</Error>
      <Stacktrace>--&gt;TestMethod Outer</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>ParameterizedTests.Simple/0 [(0,_)]</Name>
      <FullyQualifiedName>ParameterizedTests.Simple/0</FullyQualifiedName>
      <Result>Test Failed - ParameterizedTests.Simple/0 [(0,_)]</Result>
      <Source>parameterizedtests.cpp line 23</Source>
      <Error>Message: 
#1 - Value of: GetParam().i
  Actual: 0
Expected: 1
#2 - Value of: GetParam().s
  Actual: "_"
Expected: ""</Error>
      <Stacktrace>#2 - parameterizedtests.cpp:25</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>ParameterizedTests.SimpleTraits/0 [(0,_)]</Name>
      <FullyQualifiedName>ParameterizedTests.SimpleTraits/0</FullyQualifiedName>
      <Result>Test Failed - ParameterizedTests.SimpleTraits/0 [(0,_)]</Result>
      <Source>parameterizedtests.cpp line 28</Source>
      <Error>Message: 
#1 - Value of: GetParam().i
  Actual: 0
Expected: 1
#2 - Value of: GetParam().s
  Actual: "_"
Expected: ""</Error>
      <Stacktrace>#2 - parameterizedtests.cpp:30</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>ParameterizedTests.SimpleTraits2/0 [(0,_)]</Name>
      <FullyQualifiedName>ParameterizedTests.SimpleTraits2/0</FullyQualifiedName>
      <Result>Test Failed - ParameterizedTests.SimpleTraits2/0 [(0,_)]</Result>
      <Source>parameterizedtests.cpp line 33</Source>
      <Error>Message: 
#1 - Value of: GetParam().i
  Actual: 0
Expected: 1
#2 - Value of: GetParam().s
  Actual: "_"
Expected: ""</Error>
      <Stacktrace>#2 - parameterizedtests.cpp:35</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>ParameterizedTests.SimpleTraits3/0 [(0,_)]</Name>
      <FullyQualifiedName>ParameterizedTests.SimpleTraits3/0</FullyQualifiedName>
      <Result>Test Failed - ParameterizedTests.SimpleTraits3/0 [(0,_)]</Result>
      <Source>parameterizedtests.cpp line 38</Source>
      <Error>Message: 
#1 - Value of: GetParam().i
  Actual: 0
Expected: 1
#2 - Value of: GetParam().s
  Actual: "_"
Expected: ""</Error>
      <Stacktrace>#2 - parameterizedtests.cpp:40</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>PointerParameterizedTests.CheckStringLength/2 [(${MemoryLocation} pointing to "ooops", 23)]</Name>
      <FullyQualifiedName>PointerParameterizedTests.CheckStringLength/2</FullyQualifiedName>
      <Result>Test Failed - PointerParameterizedTests.CheckStringLength/2 [(${MemoryLocation} pointing to "ooops", 23)]</Result>
      <Source>parameterizedtests.cpp line 63</Source>
      <Error>Message: 
Value of: strlen(GetParam().first)
  Actual: 5
Expected: GetParam().second
Which is: 23</Error>
      <Stacktrace>parameterizedtests.cpp:64</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>PrimitivelyTypedTests/0.CanHasBigNumbers&lt;signed char&gt;</Name>
      <FullyQualifiedName>PrimitivelyTypedTests/0.CanHasBigNumbers</FullyQualifiedName>
      <Result>Test Failed - PrimitivelyTypedTests/0.CanHasBigNumbers&lt;signed char&gt;</Result>
      <Source>typeparameterizedtests.cpp line 83</Source>
      <Error>Message: 
Value of: sum
  Actual: '\x82' (-126)
Expected: 130</Error>
      <Stacktrace>typeparameterizedtests.cpp:87</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TestMath.AddFails</Name>
      <Result>Test Failed - TestMath.AddFails</Result>
      <Source>basictests.cpp line 29</Source>
      <Error>Message: 
Value of: Add(10, 10)
  Actual: 20
Expected: 1000</Error>
      <Stacktrace>basictests.cpp:30</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TestMath.Crash</Name>
      <Result>Test Failed - TestMath.Crash</Result>
      <Source>basictests.cpp line 39</Source>
      <Error>Message: 
unknown file
SEH exception with code 0xc0000005 thrown in the test body.</Error>
    </TestCase>
    <TestCase>
      <Name>TheFixture.AddFails</Name>
      <Result>Test Failed - TheFixture.AddFails</Result>
      <Source>fixturetests.cpp line 11</Source>
      <Error>Message: 
Value of: Add(10, 10)
  Actual: 20
Expected: 1000</Error>
      <Stacktrace>fixturetests.cpp:12</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TheFixture.Crash</Name>
      <Result>Test Failed - TheFixture.Crash</Result>
      <Source>fixturetests.cpp line 21</Source>
      <Error>Message: 
unknown file
SEH exception with code 0xc0000005 thrown in the test body.</Error>
    </TestCase>
    <TestCase>
      <Name>TypedTests/0.CanDefeatMath&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/0.CanDefeatMath</FullyQualifiedName>
      <Result>Test Failed - TypedTests/0.CanDefeatMath&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 28</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:29</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TypedTests/0.ThreeTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/0.ThreeTraits</FullyQualifiedName>
      <Result>Test Failed - TypedTests/0.ThreeTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 36</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:37</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TypedTests/0.TwoTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/0.TwoTraits</FullyQualifiedName>
      <Result>Test Failed - TypedTests/0.TwoTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 32</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:33</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TypedTests/1.CanDefeatMath&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/1.CanDefeatMath</FullyQualifiedName>
      <Result>Test Failed - TypedTests/1.CanDefeatMath&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 28</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:29</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TypedTests/1.ThreeTraits&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/1.ThreeTraits</FullyQualifiedName>
      <Result>Test Failed - TypedTests/1.ThreeTraits&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 36</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:37</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>TypedTests/1.TwoTraits&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/1.TwoTraits</FullyQualifiedName>
      <Result>Test Failed - TypedTests/1.TwoTraits&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 32</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:33</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Vec/TypeParameterizedTests/0.CanDefeatMath&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>Vec/TypeParameterizedTests/0.CanDefeatMath</FullyQualifiedName>
      <Result>Test Failed - Vec/TypeParameterizedTests/0.CanDefeatMath&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 53</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:54</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Vec/TypeParameterizedTests/0.ThreeTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>Vec/TypeParameterizedTests/0.ThreeTraits</FullyQualifiedName>
      <Result>Test Failed - Vec/TypeParameterizedTests/0.ThreeTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 61</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:62</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Vec/TypeParameterizedTests/0.TwoTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>Vec/TypeParameterizedTests/0.TwoTraits</FullyQualifiedName>
      <Result>Test Failed - Vec/TypeParameterizedTests/0.TwoTraits&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 57</Source>
      <Error>Message: 
Expected: (this-&gt;container[0] + this-&gt;container[1]) != (this-&gt;container[2]), actual: 3 vs 3</Error>
      <Stacktrace>typeparameterizedtests.cpp:58</Stacktrace>
    </TestCase>
  </TestGroup>
  <TestGroup>
    <description>Skipped Tests</description>
    <TestCase>
      <Name>Crashing.AddFailsAfterCrash</Name>
      <Result>Test Skipped - Crashing.AddFailsAfterCrash</Result>
      <Source>crashingtests.cpp line 26</Source>
      <Error>Message: 
reason is probably a crash of test Crashing.TheCrash</Error>
      <Stacktrace>crash suspect</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Crashing.AddPassesAfterCrash</Name>
      <Result>Test Skipped - Crashing.AddPassesAfterCrash</Result>
      <Source>crashingtests.cpp line 31</Source>
      <Error>Message: 
reason is probably a crash of test Crashing.TheCrash</Error>
      <Stacktrace>crash suspect</Stacktrace>
    </TestCase>
    <TestCase>
      <Name>Crashing.LongRunning</Name>
      <Result>Test Skipped - Crashing.LongRunning</Result>
      <Source>crashingtests.cpp line 36</Source>
      <Error>Message: 
reason is probably a crash of test Crashing.TheCrash</Error>
      <Stacktrace>crash suspect</Stacktrace>
    </TestCase>
  </TestGroup>
  <TestGroup>
    <description>Passed Tests</description>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/0.CanIterate&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/0.CanIterate</FullyQualifiedName>
      <Result>Test Passed - Arr/TypeParameterizedTests/0.CanIterate&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 46</Source>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/1.CanDefeatMath&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/1.CanDefeatMath</FullyQualifiedName>
      <Result>Test Passed - Arr/TypeParameterizedTests/1.CanDefeatMath&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 53</Source>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/1.CanIterate&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/1.CanIterate</FullyQualifiedName>
      <Result>Test Passed - Arr/TypeParameterizedTests/1.CanIterate&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 46</Source>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/1.ThreeTraits&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/1.ThreeTraits</FullyQualifiedName>
      <Result>Test Passed - Arr/TypeParameterizedTests/1.ThreeTraits&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 61</Source>
    </TestCase>
    <TestCase>
      <Name>Arr/TypeParameterizedTests/1.TwoTraits&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>Arr/TypeParameterizedTests/1.TwoTraits</FullyQualifiedName>
      <Result>Test Passed - Arr/TypeParameterizedTests/1.TwoTraits&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 57</Source>
    </TestCase>
    <TestCase>
      <Name>CommandArgs.TestDirectoryIsSet</Name>
      <Result>Test Passed - CommandArgs.TestDirectoryIsSet</Result>
      <Source>basictests.cpp line 23</Source>
    </TestCase>
    <TestCase>
      <Name>Crashing.AddPassesBeforeCrash</Name>
      <Result>Test Passed - Crashing.AddPassesBeforeCrash</Result>
      <Source>crashingtests.cpp line 16</Source>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.Simple/0 [(1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.Simple/0</FullyQualifiedName>
      <Result>Test Passed - InstantiationName/ParameterizedTests.Simple/0 [(1,)]</Result>
      <Source>parameterizedtests.cpp line 23</Source>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits/0 [(1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits/0</FullyQualifiedName>
      <Result>Test Passed - InstantiationName/ParameterizedTests.SimpleTraits/0 [(1,)]</Result>
      <Source>parameterizedtests.cpp line 28</Source>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits2/0 [(1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits2/0</FullyQualifiedName>
      <Result>Test Passed - InstantiationName/ParameterizedTests.SimpleTraits2/0 [(1,)]</Result>
      <Source>parameterizedtests.cpp line 33</Source>
    </TestCase>
    <TestCase>
      <Name>InstantiationName/ParameterizedTests.SimpleTraits3/0 [(1,)]</Name>
      <FullyQualifiedName>InstantiationName/ParameterizedTests.SimpleTraits3/0</FullyQualifiedName>
      <Result>Test Passed - InstantiationName/ParameterizedTests.SimpleTraits3/0 [(1,)]</Result>
      <Source>parameterizedtests.cpp line 38</Source>
    </TestCase>
    <TestCase>
      <Name>LongRunningTests.Test1</Name>
      <Result>Test Passed - LongRunningTests.Test1</Result>
      <Source>longrunningtests.cpp line 5</Source>
    </TestCase>
    <TestCase>
      <Name>PointerParameterizedTests.CheckStringLength/0 [(${MemoryLocation} pointing to "", 0)]</Name>
      <FullyQualifiedName>PointerParameterizedTests.CheckStringLength/0</FullyQualifiedName>
      <Result>Test Passed - PointerParameterizedTests.CheckStringLength/0 [(${MemoryLocation} pointing to "", 0)]</Result>
      <Source>parameterizedtests.cpp line 63</Source>
    </TestCase>
    <TestCase>
      <Name>PointerParameterizedTests.CheckStringLength/1 [(${MemoryLocation} pointing to "Test", 4)]</Name>
      <FullyQualifiedName>PointerParameterizedTests.CheckStringLength/1</FullyQualifiedName>
      <Result>Test Passed - PointerParameterizedTests.CheckStringLength/1 [(${MemoryLocation} pointing to "Test", 4)]</Result>
      <Source>parameterizedtests.cpp line 63</Source>
    </TestCase>
    <TestCase>
      <Name>PrimitivelyTypedTests/1.CanHasBigNumbers&lt;int&gt;</Name>
      <FullyQualifiedName>PrimitivelyTypedTests/1.CanHasBigNumbers</FullyQualifiedName>
      <Result>Test Passed - PrimitivelyTypedTests/1.CanHasBigNumbers&lt;int&gt;</Result>
      <Source>typeparameterizedtests.cpp line 83</Source>
    </TestCase>
    <TestCase>
      <Name>PrimitivelyTypedTests/2.CanHasBigNumbers&lt;long&gt;</Name>
      <FullyQualifiedName>PrimitivelyTypedTests/2.CanHasBigNumbers</FullyQualifiedName>
      <Result>Test Passed - PrimitivelyTypedTests/2.CanHasBigNumbers&lt;long&gt;</Result>
      <Source>typeparameterizedtests.cpp line 83</Source>
    </TestCase>
    <TestCase>
      <Name>TestMath.AddPasses</Name>
      <Result>Test Passed - TestMath.AddPasses</Result>
      <Source>basictests.cpp line 34</Source>
    </TestCase>
    <TestCase>
      <Name>TestMath.AddPassesWithTraits</Name>
      <Result>Test Passed - TestMath.AddPassesWithTraits</Result>
      <Source>basictests.cpp line 45</Source>
    </TestCase>
    <TestCase>
      <Name>TestMath.AddPassesWithTraits2</Name>
      <Result>Test Passed - TestMath.AddPassesWithTraits2</Result>
      <Source>basictests.cpp line 50</Source>
    </TestCase>
    <TestCase>
      <Name>TestMath.AddPassesWithTraits3</Name>
      <Result>Test Passed - TestMath.AddPassesWithTraits3</Result>
      <Source>basictests.cpp line 55</Source>
    </TestCase>
    <TestCase>
      <Name>TheFixture.AddPasses</Name>
      <Result>Test Passed - TheFixture.AddPasses</Result>
      <Source>fixturetests.cpp line 16</Source>
    </TestCase>
    <TestCase>
      <Name>TheFixture.AddPassesWithTraits</Name>
      <Result>Test Passed - TheFixture.AddPassesWithTraits</Result>
      <Source>fixturetests.cpp line 27</Source>
    </TestCase>
    <TestCase>
      <Name>TheFixture.AddPassesWithTraits2</Name>
      <Result>Test Passed - TheFixture.AddPassesWithTraits2</Result>
      <Source>fixturetests.cpp line 32</Source>
    </TestCase>
    <TestCase>
      <Name>TheFixture.AddPassesWithTraits3</Name>
      <Result>Test Passed - TheFixture.AddPassesWithTraits3</Result>
      <Source>fixturetests.cpp line 37</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/0.CanIterate&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/0.CanIterate</FullyQualifiedName>
      <Result>Test Passed - TypedTests/0.CanIterate&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 21</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/1.CanIterate&lt;std::array&lt;int,3&gt; &gt;</Name>
      <FullyQualifiedName>TypedTests/1.CanIterate</FullyQualifiedName>
      <Result>Test Passed - TypedTests/1.CanIterate&lt;std::array&lt;int,3&gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 21</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/2.CanDefeatMath&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>TypedTests/2.CanDefeatMath</FullyQualifiedName>
      <Result>Test Passed - TypedTests/2.CanDefeatMath&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 28</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/2.CanIterate&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>TypedTests/2.CanIterate</FullyQualifiedName>
      <Result>Test Passed - TypedTests/2.CanIterate&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 21</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/2.ThreeTraits&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>TypedTests/2.ThreeTraits</FullyQualifiedName>
      <Result>Test Passed - TypedTests/2.ThreeTraits&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 36</Source>
    </TestCase>
    <TestCase>
      <Name>TypedTests/2.TwoTraits&lt;MyStrangeArray&gt;</Name>
      <FullyQualifiedName>TypedTests/2.TwoTraits</FullyQualifiedName>
      <Result>Test Passed - TypedTests/2.TwoTraits&lt;MyStrangeArray&gt;</Result>
      <Source>typeparameterizedtests.cpp line 32</Source>
    </TestCase>
    <TestCase>
      <Name>Vec/TypeParameterizedTests/0.CanIterate&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Name>
      <FullyQualifiedName>Vec/TypeParameterizedTests/0.CanIterate</FullyQualifiedName>
      <Result>Test Passed - Vec/TypeParameterizedTests/0.CanIterate&lt;std::vector&lt;int,std::allocator&lt;int&gt; &gt; &gt;</Result>
      <Source>typeparameterizedtests.cpp line 46</Source>
    </TestCase>
  </TestGroup>
  <TestOutput>------ Run test started ------
Found ${NrOfTests} tests in executable ${SolutionDir}\Debug\CrashingTests.exe
Found ${NrOfTests} tests in executable ${SolutionDir}\Debug\Tests.exe
Running 78 tests...
Warning: Test teardown batch returned exit code 1, executed command: '${SolutionDir}\Tests\Returns1.bat'
Test execution completed.
========== Run test finished: 78 run (${RunTime}) ==========
</TestOutput>
</TestRun>